---
title: "InteroceptionScale - Data Analysis"
editor: source
editor_options: 
  chunk_output_type: console
format:
  html:
    code-fold: true
    self-contained: false
    toc: true
---


## Data Preparation

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(easystats)
library(patchwork)
library(ggside)
library(EGAnet)
library(tidygraph)
library(ggraph)
```


```{r}
#| code-fold: false

df <- read.csv("../data/rawdata_participants.csv")

items <- select(df, contains("_Q")) 
byfacet <- items[df$Condition=="Dimensions",]
bymodality <- items[df$Condition=="Domains",]
byrandom <- items[df$Condition=="Random",]

labels <- list(
  Sexual_State_Q1 = "I always know when I am sexually aroused",
  Sexual_State_Q2 = "I always feel in my body if I am sexually aroused",
  Sexual_State_Q3 = "My body is always in the same specific state  when I am sexually aroused",
  Sexual_State_Q4 = "Being sexually aroused is a very different bodily feeling compared to other states (e.g., feeling anxious, relaxed, or after physical exercise)",
  Sexual_State_Q5 = "I can always tell that I am sexually aroused from the way I feel inside",
  Sexual_State_A = "I always know that I am attentively doing a study",
  Sexual_Cardiac_Q1 = "When I am sexually aroused, I often feel changes in the way my heart beats (e.g., faster or stronger)",
  Sexual_Respiratory_Q1 = "When I am sexually aroused, I often feel changes in my breathing (e.g., faster, shallower, or less regular)",
  Sexual_Gastric_Q1 = "When I am sexually aroused, I often feel changes in my stomach (e.g., bloating, rumbling, discomfort)",
  Sexual_Gastric_Q2 = "When I am sexually aroused, I often feel butterflies in my stomach",
  Sexual_Genital_Q1 = "When I am sexually aroused, I often notice specific sensations in my genital area (e.g., tingling, warmth, wetness, stiffness, pulsations)",
  Sexual_Genital_Q2 = "During sex or masturbation, I often feel very strong sensations coming from my genital areas",
  Sexual_SkinThermo_Q1 = "When I am sexually aroused, I often feel changes in my temperature (e.g., feeling warm or cold)",
  Sexual_SkinThermo_Q2 = "When I am sexually aroused, I often feel like some areas of my skin become sweaty (e.g., palms, back, forehead)",
  Sexual_SkinThermo_Q3 = "When I am sexually aroused, I often feel my mouth becoming dry",
  Sexual_ColonBladder_Q1 = "When I am sexually aroused, I often feel like I need to relieve myself by urinating or defecating",
  Sexual_ColonBladder_Q2 = "During sex or masturbation, I often feel like I need to relieve myself by urinating or defecating",
  Anxious_State_Q1 = "I always know when I am anxious",
  Anxious_State_Q2 =  "I always feel in my body if I am anxious",
  Anxious_State_Q3 = "My body is always in the same specific state when I am anxious",
  Anxious_State_Q4 = "Being anxious is a very different bodily feeling compared to other states (e.g., feeling sexually aroused, relaxed or after exercise)",
  Anxious_State_Q5 = "I often realize that I am anxious only when others tell me",
  Anxious_Cardiac_Q1 = "When I am anxious, I often feel changes in the way my heart beats (e.g., faster or stronger)",
  Anxious_Respiratory_Q1 = "When I am anxious, I often feel changes in my breathing (e.g., faster, shallower, or less regular)",
  Anxious_Gastric_Q1 = "When I am anxious, I often feel changes in my stomach (e.g., bloating, rumbling, discomfort)",
  Anxious_Genital_Q1 = "When I am anxious, I often notice specific sensations in my genital area (e.g., contractions, dryness)",
  Anxious_SkinThermo_Q1 = "When I am anxious, I often feel changes in my temperature (e.g., feeling warm or cold)",
  Anxious_SkinThermo_Q2 = "When I am anxious, I often feel like some areas of my skin become sweaty (e.g., palms, back, forehead)",
  Anxious_SkinThermo_Q3 = "When I am anxious, I often feel my mouth becoming dry",
  Anxious_SkinThermo_Q4 = "When I am anxious, I often have difficulty swallowing",
  Anxious_SkinThermo_A = "Even if I am anxious, I should now answer all the way to the left",
  Anxious_ColonBladder_Q1 = "When I am anxious, I often feel like I need to relieve myself by urinating or defecating",
  Nociception_State_Q1 = "I always feel in my body if I am ill",
  Nociception_State_Q2 =  "I can easily tell when I am feeling ill (e.g., nauseous or sick)",
  Nociception_Cardiac_Q1 = "I often feel painful sensations coming from my heart",
  Nociception_Cardiac_Q2 = "I often experience painful sensations coming from my chest",
  Nociception_Respiratory_Q1 = "I often feel like I have difficulties breathing normally",
  Nociception_Respiratory_Q2 = "I often feel like I can't get enough oxygen by breathing normally",
  Nociception_Gastric_Q1 = "I often feel pain in my stomach",
  Nociception_Genital_Q1 = "My genital organs are very sensitive to pleasant stimulations",
  Nociception_Genital_Q2 = "My genital organs are very sensitive to painful stimulations",
  Nociception_SkinThermo_Q = "My skin is very sensitive to painful stimulations (e.g., pinching)",
  Nociception_SkinThermo_Q2 = "My skin is very sensitive to pleasant stimulations (e.g., caressing)",
  Nociception_SkinThermo_Q3 = "Changes in temperature (e.g., feeling feverish or cold) are the first things I notice when I am becoming ill",
  Nociception_ColonBladder_Q1 = "I often experience a pleasant sensation when relieving myself when urinating or defecating)",
  Nociception_ColonBladder_Q2 = "I often experience painful sensations when relieving myself when urinating or defecating",
  Nociception_ColonBladder_A = "I often experience sensations, and I will answer zero to this question",
  Sensitivity_State_Q1 =  "I always know when I am relaxed",
  Sensitivity_State_Q2 =  "I always feel in my body if I am relaxed",
  Sensitivity_State_Q3 = "My body is always in the same specific state when I am relaxed",
  Sensitivity_State_Q4 = "Being relaxed is a very different bodily feeling compared to other states (e.g., feeling anxious, sexually aroused or after exercise)",
  Sensitivity_State_Q5 = "When something important is happening in my life, I can feel it in my body",
  Sensitivity_Cardiac_Q1 = "In general, I am very sensitive to changes in my heart rate",
  Sensitivity_Cardiac_Q2 = "I often notice changes in my heart rate",
  Sensitivity_Cardiac_Q3 = "I can notice even very subtle changes in the way my heart beats",
  Sensitivity_Cardiac_Q4 = "I am always very aware of my heartbeats, even when I am calm",
  Sensitivity_Cardiac_Q5 = "I only notice my heart when it is thumping in my chest",
  Sensitivity_Cardiac_Q6 = "I often try to feel my heart with my hands (e.g., by putting my hand on my chest)",
  Sensitivity_Cardiac_Q7 = "When something important is happening in my life, I can feel immediately feel changes in my heart rate",
  Sensitivity_Cardiac_A = "In general, I am very sensitive and attentive to the questions I am currently answering",
  Sensitivity_Respiratory_Q1 = "In general, I am very sensitive to changes in my breathing",
  Sensitivity_Respiratory_Q = "I often notice changes in my breathing",
  Sensitivity_Respiratory_Q3 = "I can notice even very subtle changes in my breathing",
  Sensitivity_Respiratory_Q4 = "I am always very aware of how I am breathing, even when I am calm",
  Sensitivity_Respiratory_Q5 = "I often only notice how I am breathing when it becomes loud",
  Sensitivity_Respiratory_Q6 = "I often only notice how I am breathing when my breathing becomes shallow or irregular",
  Sensitivity_Respiratory_Q7 = "When something important is happening in my life, I can immediately feel changes in my breathing",
  Sensitivity_Gastric_Q1 = "In general, I am very sensitive to what my stomach is doing",
  Sensitivity_Gastric_Q2 = "I can notice even very subtle changes in what my stomach is doing",
  Sensitivity_Gastric_Q3 = "I am always very aware of what my stomach is doing, even when I am calm",
  Sensitivity_Gastric_Q4 = "I often check the smell of my own breath",
  Sensitivity_Gastric_Q5 = "I often check the smell of my farts",
  Sensitivity_Gastric_Q6 = "I often pay attention to the noises of my stomach",
  Sensitivity_Gastric_A = "I often pay attention to the answers I am giving",
  Sensitivity_Genital_Q1 = "In general, I am very sensitive to changes in my genital organs",
  Sensitivity_Genital_Q2 = "I can notice even very subtle changes in the state of my genital organs",
  Sensitivity_Genital_Q3 = "I am always very aware of the state of my genital organs, even when I am calm",
  Sensitivity_SkinThermo_Q1 = "In general, my skin is very sensitive",
  Sensitivity_SkinThermo_Q2 = "I can notice even very subtle stimulations to my skin (e.g., very light touches)",
  Sensitivity_SkinThermo_Q3 =  "I can notice even very subtle changes if my skin becomes dry or sweaty",
  Sensitivity_SkinThermo_Q4 ="I am always very aware if my hands and feet are cold or warm",
  Sensitivity_SkinThermo_Q5 = "I often check the smell of my armpits",
  Sensitivity_SkinThermo_Q6 = "I am very prone to having goosebumps",
  Sensitivity_SkinThermo_Q7 ="My skin is susceptible to itchy fabrics and materials",
  Sensitivity_SkinThermo_Q8 = "I enjoy the sensations of touching different materials (e.g., soft fabrics, wooden objects, smooth surfaces)",
  Sensitivity_ColonBladder_Q1 = "In general, I am very aware of the sensations that are happening when I am defecating",
  Sensitivity_ColonBladder_Q2 = "In general, I am very aware of the sensations that are happening when I am urinating",
  Sensitivity_ColonBladder_Q3 = "I often check the colour of my urine",
  Sensitivity_ColonBladder_Q4 =  "I often check the colour of my faeces",
  Accuracy_State_Q1 =  "I can always accurately feel when I am about to cough",
  Accuracy_State_Q2 = "I can always accurately feel when I am about to sneeze",
  Accuracy_State_Q3 = "I can always accurately feel when I am about to vomit",
  Accuracy_State_Q4 = "I can always accurately feel when I am starting to be hungry",
  Accuracy_State_Q5 = "I can always accurately feel when I am starting to be thirsty",
  Accuracy_Cardiac_Q1 = "I can always accurately feel if my heart rate is slow or fast",
  Accuracy_Cardiac_Q2 = "I sometimes feel like my heart is racing or beating faster than usual, but when I check my pulse, it is not as intense as I thought",
  Accuracy_Respiratory_Q1 = "I can always accurately feel how I am breathing (e.g., fast or slow, deep or shallow)",
  Accuracy_Respiratory_A = "I can always accurately answer to the left on this question to show that I am reading it",
  Accuracy_Gastric_Q1 = "I can always accurately feel when I am about to fart",
  Accuracy_Gastric_Q2 = "I can always accurately feel when I am about to burp",
  Accuracy_Gastric_Q3 = "I often feel thirsty even if I drank recently",
  Accuracy_Gastric_Q4 = "I don't always feel the need to drink until I am really thirsty",
  Accuracy_Gastric_Q5 = "I often feel hungry even if I ate recently",
  Accuracy_Gastric_Q6 = "I don't always feel the need to eat until I am really hungry",
  Accuracy_Gastric_Q7 = "I often sneeze suddenly without feeling the need building up",
  Accuracy_Gastric_Q8 = "I sometimes feel that burping will produce some relief but then it doesn't",
  Accuracy_Genital_Q1 = "I can always accurately perceive if my genital organs are in a state of arousal (e.g., hard, wet, pulsating)",
  Accuracy_Genital_Q2 = "I sometimes feel like I am sexually aroused, but when I try to satisfy the feeling, I realise that I am not as sexually aroused as I initially thought",
  Accuracy_Genital_A = "I can always accurately perceive that to this question I should answer the lowest option",
  Accuracy_SkinThermo_Q1 = "I can always accurately feel when something is going to be itchy",
  Accuracy_SkinThermo_Q2 = "I can always accurately feel when I start to have a fever",
  Accuracy_SkinThermo_Q3 = "When something touches my skin, I can always accurately feel if it's hot or cold",
  Accuracy_SkinThermo_Q4 = "I sometimes feel my skin itching, but when I scratch it, it doesn't produce the relief I expected",
  Accuracy_ColonBladder_Q1 = "I often feel the need to urinate even when my bladder is not full",
  Accuracy_ColonBladder_Q2 = "I don't always feel the need to urinate until my bladder is very full",
  Accuracy_ColonBladder_Q3 = "I often feel the need to defecate even when my intestine is not full",
  Accuracy_ColonBladder_Q4 = "I don't always feel the need to defecate until my intestine is very full",
  Accuracy_ColonBladder_Q5 = "I sometimes feel like I need to urinate or defecate but when I go to the bathroom I produce less than I expected",
  Confusion_State_Q1 = "Sometimes I can't tell if the sensations in my body are good or bad",
  Confusion_State_Q2 = "Sometimes I am confused about what sensations in my body mean",
  Confusion_Cardiac_Q1 = "Sometimes my heart starts racing and I often don't know why",
  Confusion_Respiratory_Q1 = "Sometimes my breathing becomes erratic or shallow and I often don't know why",
  Confusion_Gastric_Q1 = "Sometimes I feel negative and realise after eating that I was just hungry",
  Confusion_Gastric_Q2 = "Sometimes I don't realise I was hungry until I ate something",
  Confusion_Genital_Q1 = "Sometimes I notice arousal in my genital areas (e.g., stiffness, wetness) when I am not feeling sexually aroused",
  Confusion_SkinThermo_Q1 = "Sometimes I have sensations on my skin (e.g., itches, goosebumps) without any clear cause",
  Confusion_ColonBladder_Q1 = "Sometimes I am not sure whether I need to go to the toilet or not (to urinate or defecate)",
  Confusion_ColonBladder_A = "Sometimes I notice that I need to answer all the way to the right"
)

# Make 
```

## Item Correlation

::: {.panel-tabset}

### Full Sample

```{r}
#| fig-width: 12
#| fig-height: 12

make_heatmap <- function(items, interactive=TRUE, title="Correlation Matrix") {
  fn <- if(interactive) heatmaply::heatmaply else heatmaply::ggheatmap
  
  fn(
    cor(items),
    symm = TRUE,
    colors=heatmaply::cool_warm,
    show_dendrogram =c(FALSE, TRUE),
    main=title,
    showticklabels = FALSE,
    hide_colorbar = TRUE,
    k_col = 4,
    # k_row = 4,
    limits = c(-1, 1)
    )
}

# p1 <- make_heatmap(items, title="Full Sample")
# p1
```

### By Facet

Also "Dimension" / "Domains" / "Context"

```{r}
# p2 <- make_heatmap(byfacet, title="By Facet")
# p2
```

### By Modality

```{r}
# p3 <- make_heatmap(bymodality, title="By Modality")
# p3
```

### Random Grouping

```{r}
# p4 <- make_heatmap(byrandom, title="Random Grouping")
# p4
```


### Figures

```{r}
#| output: false

# p1 <- make_heatmap(items, interactive=FALSE) |>
#   gridExtra::arrangeGrob(top = 'Full Sample')
# p2 <- make_heatmap(byfacet, interactive=FALSE, title="By Facet") |>
#   gridExtra::arrangeGrob(top = 'By Facet')
# p3 <- make_heatmap(bymodality, interactive=FALSE, title="By Modality") |>
#   gridExtra::arrangeGrob(top = 'By Modality')
# p4 <- make_heatmap(byrandom, interactive=FALSE, title="Random Grouping") |>
#   gridExtra::arrangeGrob(top = 'Random Grouping')
```

```{r}
#| fig-width: 12
#| fig-height: 12

# gridExtra::grid.arrange(
#   p1, p2, p3, p4,
#   layout_matrix=rbind(
#     c(1,1,1),
#     c(1,1,1),
#     c(2,3, 4)))
```

:::


### Similarity

```{r}
# bootstrap_similarity <- function(df) {
#   rez <- data.frame()
#   for(i in 1:200) {
#     idx <- sample(1:nrow(df), nrow(df), replace=TRUE)
#     newdata <- df[idx,]
#     items <- select(df, contains("_Q"))
#     byfacet <- items[newdata$Condition=="Dimensions",]
#     bymodality <- items[newdata$Condition=="Domains",]
#     byrandom <- items[newdata$Condition=="Random",]
#     
#     rez <- rbind(
#       MatrixCorrelation::allCorrelations(cor(byrandom), cor(byfacet), 
#                                          ncomp1=10, ncomp2=10, plot=FALSE),
#       MatrixCorrelation::allCorrelations(cor(byrandom), cor(bymodality), 
#                                          ncomp1=10, ncomp2=10, plot=FALSE),
#       MatrixCorrelation::allCorrelations(cor(items), cor(byfacet),
#                                          ncomp1=10, ncomp2=10, plot=FALSE),
#       MatrixCorrelation::allCorrelations(cor(items), cor(bymodality), 
#                                          ncomp1=10, ncomp2=10, plot=FALSE)) |>
#       as.data.frame() |> 
#       mutate(
#         Comparison = c("Random vs. Facet", "Random vs. Modality", "Full vs. Facet", "Full vs. Modality"),
#         Sample = c("Random", "Random", "Full", "Full"),
#         Iteration = i) |> 
#       mutate(d_PSI = diff(PSI), d_RV = diff(RV), d_RVadj = diff(RVadj), d_SMI = diff(SMI), .by="Sample") |> 
#       rbind(rez)
#   }
#   rez
# }
# 
# 
# rez <- bootstrap_similarity(df)
# 
# rez |> 
#   pivot_longer(-c("Comparison", "Sample", "Iteration")) |> 
#   filter(name %in% c("PSI", "RV", "RVadj", "SMI")) |> 
#   mutate(side = ifelse(str_detect(Comparison, "Facet"), "left", "right")) |> 
#   ggplot(aes(x=name, y=value, fill=Comparison, color=Comparison)) +
#   ggdist::stat_halfeye(aes(side=side), position=position_dodge(width=0.3), alpha=0.7) +
#   facet_wrap(~Sample) +
#   scale_fill_manual(values=c("Random vs. Facet"="#F44336", "Random vs. Modality"="#2196F3", "Full vs. Facet"="#FF5722", "Full vs. Modality"="#00BCD4")) +
#   scale_color_manual(values=c("Random vs. Facet"="#F44336", "Random vs. Modality"="#2196F3", "Full vs. Facet"="#FF5722", "Full vs. Modality"="#00BCD4")) +
#   labs(x="Indices of Correlation Matrix Difference", y="Similarity") +
#   theme_minimal()
# 
# rez |> 
#   pivot_longer(-c("Comparison", "Sample", "Iteration")) |> 
#   filter(str_detect(name, "d_") & str_detect(Comparison, "Facet")) |> 
#   ggplot(aes(x=name, y=value)) +
#   ggdist::stat_eye(aes(fill = after_stat(y < 0))) +
#   facet_wrap(~Sample) +
#   geom_hline(yintercept=0, linetype="dashed") +
#   labs(x="Indices of Correlation Matrix Difference", y="Similarity Difference") +
#   theme_minimal() +
#   scale_fill_manual(values=c("TRUE"="#F44336", "FALSE"="#2196F3"), guide="none")
```

## Item Selection

### Unique Variable Analysis (UVA)

```{r}
uva <- EGAnet::UVA(items, cut.off = 0.2)
# uva

toremove_table <- rbind(
  data.frame(
  Condition = "Full Sample",
  Remove = uva$keep_remove$remove),
  data.frame(
  Condition = "By Facet",
  Remove = EGAnet::UVA(byfacet, cut.off = 0.2)$keep_remove$remove),
  data.frame(
  Condition = "By Modality",
  Remove = EGAnet::UVA(bymodality, cut.off = 0.2)$keep_remove$remove),
  data.frame(
  Condition = "Random Grouping",
  Remove = EGAnet::UVA(byrandom, cut.off = 0.2)$keep_remove$remove)
) |>
  mutate(n = n(), .by=c("Remove")) |>
  mutate(Condition = fct_relevel(Condition, "Full Sample", "By Facet", "By Modality", "Random Grouping")) |>
  arrange(desc(n), Remove, Condition)

toremove <- filter(toremove_table, Condition=="Full Sample" & n > 1)$Remove

toremove_table |>
  select(-n) |>
  gt::gt() |>
  gt::data_color(columns=Remove, fn=\(x) ifelse(x %in% toremove, "#FFEBEE", "white"))
```

```{r}
items <- select(items, -all_of(toremove))
byfacet <- select(byfacet, -all_of(toremove))
bymodality <- select(bymodality, -all_of(toremove))
byrandom <- select(byrandom, -all_of(toremove))
```

### Cluster Stability

```{r}
#| eval: false

ega1 <- bootEGA(
  items,
  EGA.type = "EGA",
  model = "glasso",  # BGGM
  algorithm = "louvain",  # walktrap
  type="resampling",
  plot.itemStability=FALSE,
  typicalStructure=TRUE,
  plot.typicalGraph=TRUE,
  iter=500,
  seed=3, ncores = 4)

save(ega1, file="models/ega1.RData")
```

```{r}
load("models/ega1.RData")

# EGAnet::dimensionStability(ega)
itemstability <- EGAnet::itemStability(ega1, IS.plot=FALSE)
plot(itemstability)

make_loadingtable <- function(x) {
  t <- as.data.frame(x) |>
    datawizard::data_addprefix("C")
  t$Cluster <- colnames(t)[max.col(t, ties.method='first')]
  
  t |>
    rownames_to_column(var="Item") |>
    rowwise() |>
    mutate(Max = max(c_across(-c(Item, Cluster)))) |>
    arrange(Cluster, desc(Max)) |> 
    as.data.frame()
}


itemstability_table <- make_loadingtable(itemstability$item.stability$all.dimensions) 

toremove2 <- filter(itemstability_table, Max < 0.7)$Item

itemstability_table |>
  select(-Cluster, -Max) |>
  gt::gt() |>
  gt::data_color(columns=-Item,
                 method = "numeric",
                 palette = c("white", "orange", "green"),
                 domain = c(0, 1)) |>
  gt::data_color(columns=Item, fn=\(x) ifelse(x %in% toremove2, "#FFEBEE", "white")) |>
  gt::tab_header(
    title = gt::md("**Item Stability**"),
    subtitle = "Proportion of times an item is assigned to the same cluster"
  )
```


```{r}
items <- select(items, -all_of(toremove2))
byfacet <- select(byfacet, -all_of(toremove2))
bymodality <- select(bymodality, -all_of(toremove2))
byrandom <- select(byrandom, -all_of(toremove2))
```

### Item Loadings



```{r}
#| eval: false

ega2 <- bootEGA(
  items,
  EGA.type = "hierEGA",
  model = "glasso",  # BGGM
  algorithm = "louvain",  # walktrap
  type="resampling",
  plot.itemStability=FALSE,
  typicalStructure=TRUE,
  plot.typicalGraph=TRUE,
  iter=500,
  seed=3, ncores = 4)

save(ega2, file="models/ega2.RData")
```

```{r}
load("models/ega2.RData")

# itemStability(ega2)

lower <- make_loadingtable(net.loads(ega2$EGA$lower_order)$std) 

toremove3 <- lower$Item[!lower$Item %in% slice_max(lower, Max, n=3, by="Cluster")$Item]

lower |>
  select(-Cluster, -Max) |>
  gt::gt() |>
  gt::data_color(columns=-Item,
                 method = "numeric",
                 palette = c("red", "white", "green"),
                 domain = c(-1, 1)) |>
  gt::data_color(columns=Item, fn=\(x) ifelse(x %in% toremove3, "#FFEBEE", "white")) |>
  gt::tab_header(
    title = gt::md("**Item Loadings**"),
    subtitle = "Node centrality"
  )
```

```{r}
items <- select(items, -all_of(toremove3))
byfacet <- select(byfacet, -all_of(toremove3))
bymodality <- select(bymodality, -all_of(toremove3))
byrandom <- select(byrandom, -all_of(toremove3))
```




## Structure Analysis


```{r}
#| eval: false

ega3 <- bootEGA(
  items,
  EGA.type = "hierEGA",
  model = "glasso",  # BGGM
  algorithm = "louvain",  # walktrap
  type="resampling",
  plot.itemStability=FALSE,
  typicalStructure=TRUE,
  plot.typicalGraph=TRUE,
  iter=500,
  seed=3, ncores = 4)

save(ega3, file="models/ega3.RData")
```

```{r}
load("models/ega3.RData")

# itemStability(ega2)

lower <- make_loadingtable(net.loads(ega3$EGA$lower_order)$std) 
higher <- make_loadingtable(t(net.loads(ega3$EGA$higher_order)$std)) |> 
  select(names(lower)) |> 
  arrange(Item)
higher$Item <- paste0("H", higher$Item) 

rbind(higher, lower) |>
  select(-Cluster, -Max) |>
  gt::gt() |>
  gt::tab_row_group(
    label = "Item",
    rows = 1:(nrow(lower) + nrow(higher))
  ) |>
  gt::tab_row_group(
    label = "Higher Order",
    rows = 1:nrow(higher)
  ) |> 
  gt::data_color(columns=-Item,
                 method = "numeric",
                 palette = c("red", "white", "green"),
                 domain = c(-1, 1)) |>
  gt::data_color(columns=Item, fn=\(x) ifelse(x %in% toremove3, "#FFEBEE", "white")) |>
  gt::tab_header(
    title = gt::md("**Item Loadings**"),
    subtitle = "Node centrality"
  )
```

```{r}
graph <- convert2tidygraph(ega3) 

tidygraph::tbl_graph(graph$nodes, edges=graph$edges, directed=FALSE) |>
  ggraph::ggraph(layout = 'graphopt') +
  ggraph::geom_edge_arc(aes(edge_color = link, edge_width = abs(link), edge_alpha=as.numeric(type == "real")), strength=0.1) +
  ggraph::geom_edge_arc(aes(edge_alpha=as.numeric(type == "virtual")), edge_width=0.1, strength=0) +
  ggraph::geom_node_point(aes(color=dimension, shape=level), size=10, alpha=0.7) +
  ggraph::geom_node_text(aes(label=name), repel=TRUE) +
  scale_edge_alpha(range = c(0, 0.9), guide="none") +
  scale_shape_manual(values=c("Higher"="square", "Lower"="circle")) +
  theme_void()
```





<!-- ::: {.panel-tabset} -->

<!-- ### Full Sample -->



<!-- ### By Dimension / Domains / Context -->

<!-- ```{r} -->
<!-- bydimension <- items[df$Condition=="Dimensions",] -->

<!-- ega_bydimension <- EGA(bydimension[, 1:20], plot.EGA = FALSE) -->

<!-- plot(ega_bydimension) -->
<!-- ``` -->

<!-- ### By Modalities -->

<!-- ```{r} -->
<!-- bymodality <- items[df$Condition=="Domains",] -->

<!-- ega_bymodality <- EGA(bymodality[, 1:20], plot.EGA = FALSE) -->

<!-- plot(ega_bymodality) -->
<!-- ``` -->

<!-- ::: -->

<!-- ## Model Comparison -->


<!-- ```{r} -->
<!-- EGAnet::EGM(items[, 1:60]) -->

<!-- # EGAnet::EGM.compare(items[, 1:20]) -->

<!-- rez <- EGAnet::network.compare(byfacet[, 1:20], bymodality[, 1:20], seed=3) -->
<!-- plot(rez) -->
<!-- ``` -->

### Empirical vs. Model Scores


```{r}
EGAnet::net.scores()
```
