---
title: "Interoception Scale - Data Cleaning"
editor: source
editor_options: 
  chunk_output_type: console
format:
  html:
    code-fold: true
    self-contained: false
    toc: true
bibliography: references.bib
---

## Data Preparation

```{r}
#| warning: false
#| code-fold: false
#| error: false

library(tidyverse)
library(easystats)
library(patchwork)
library(ggside)

df <- read.csv("../data/rawdata_participants.csv")
```

## Feedback

### Experiment Enjoyment

```{r}
#| warning: false

#| error: false

p_feed <- estimate_density(df$Experiment_Enjoyment) |>
  normalize(select = y) |>
  mutate(y = y * 86) |>  # To match the binwidth
  ggplot(aes(x = x)) +
  geom_bar(data=df, aes(x = Experiment_Enjoyment, fill = Condition), bins=28) +
  scale_fill_manual(values = c("Dimensions"= "#ff944d","Domains" = "#ca0020", "Random"="#ff80d5")) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  labs(title = "Experiment Enjoyment and Condition", y = "Number of Participants", fill = " ", x = "Ratings of enjoyment on a scale 1-5", subtitle = "Distribution of Participants' Experiment Enjoyment and Condition") +
  facet_wrap(~Condition) +
  theme_modern(axis.title.space = 10) +
  theme(
    plot.title = element_text(size = rel(1.2), face = "bold", hjust = 0),
    plot.subtitle = element_text(size = rel(1.2), vjust = 7),
    axis.text.y = element_text(size = rel(1.1)),
    axis.text.x = element_text(size = rel(1.1)),
  )
p_feed

```

### Comments

```{r}
data.frame(Condition = df$Condition,
          Comments = df$Experiment_Feedback) |> 
  filter(!tolower(Comments) %in% c(NA, "None", "no", "none", "No thank you", "no thank you", "no not at all", "no thanks", "No comment", "No", "nil", "N.A", "n/a", "N/A", "na", "Not Really")) |> 
  gt::gt() |> 
  gt::opt_stylize() |> 
  gt::opt_interactive(use_compact_mode = TRUE) 
```

## Exclusions

```{r}
outliers <- list()
```

### Attention Checks

```{r}
#| warning: false
#| error: false

dfchecks <- df |>
  dplyr::mutate(
    # "I always know that I am attentively doing a study"
    A1 = ifelse(Sexual_State_A == 6 | Sexual_State_A == 5, 0, 1),
    # "Even if I am anxious, I should now answer all the way to the left"
    A2 = ifelse(Anxious_SkinThermo_A == 0, 0, 1),
    # "I often experience sensations, and I will answer zero to this question"
    A3 = ifelse(Nociception_ColonBladder_A == 0, 0, 1),
    # "In general, I am very sensitive and attentive to the questions I am currently answering"
    A4 = ifelse(Sensitivity_Cardiac_A == 6 | Sensitivity_Cardiac_A == 5, 0, 1),
    # "I often pay attention to the answers I am giving"
    A5 = ifelse(Sensitivity_Gastric_A == 6 | Sensitivity_Gastric_A == 5, 0, 1),
    # "I can always accurately answer to the left on this question to show that I am reading it"
    A6 = ifelse(Accuracy_Respiratory_A == 0 | Accuracy_Respiratory_A == 1, 0, 1),
    # "I can always accurately perceive that to this question I should answer the lowest option"
    A7 = ifelse(Accuracy_Genital_A == 0, 0, 1),
    # "Sometimes I notice that I need to answer all the way to the right"
    A8 = ifelse(Confusion_ColonBladder_A == 6, 0, 1),
    .keep = "none"
  ) 
dfchecks$Total <- rowSums(dfchecks)


dfchecks |>
  mutate(Total = as.factor(paste0(Total, "/8"))) |> 
  ggplot(aes(x = Total)) +
  geom_bar(aes(fill = Total)) +
  scale_fill_viridis_d(guide = "none") +
  labs(title = "Failed Attention Checks", y = "Number of Participants", subtitle = "Number of failed attention checks per participant") +
  theme_modern(axis.title.space = 15) +
  theme(
    plot.title = element_text(size = rel(1.2), face = "bold", hjust = 0),
    plot.subtitle = element_text(size = rel(1.2), vjust = 7),
    axis.title.x = element_blank(),
  )
```

```{r}
outliers$attentionchecks <- df$Participant[dfchecks$Total >= 1]
```

We removed `r length(outliers$attentionchecks)` (`r insight::format_percent(length(outliers$attentionchecks) / nrow(df))`) participants for having failed at least 1 attention check (out of 8).

### Mahalanobis Distance

```{r}
# Compute distance
dfoutlier <- performance::check_outliers(select(df, contains("_Q")), 
                                         method=c("lof"),
                                         threshold=list(lof = 0.0001)) |> 
  as.data.frame() |> 
  mutate(Participant = fct_reorder(df$Participant, Distance_LOF),
         Outlier_AttentionCheck = ifelse(Participant %in% outliers$attentionchecks, 1, 0),
         Outlier = ifelse(Outlier_LOF == 1, "Distance Outlier", "Valid"),
         Outlier = ifelse(Outlier_AttentionCheck == 1, "Failed Attention Check", Outlier))

# parameters::parameters(glm(Outlier_AttentionCheck ~ Distance_LOF, data = dfoutlier, family = "binomial"))

outliers$distance <- as.character(dfoutlier[dfoutlier$Outlier_LOF == 1, "Participant"])
outliers$distance <- outliers$distance[!outliers$distance %in% outliers$attentionchecks]

dfoutlier |> 
  ggplot(aes(x=Participant, y=Distance_LOF)) +
  geom_bar(aes(fill=Outlier), stat="identity") +
  theme_minimal() +
  theme(axis.text.x = element_blank())
```

Mahalanobis distance [@demaesschalck2000] is commonly used to detect multivariate outliers, which are data points with unusual combinations of scores on two or more variables [@filzmoser2016]. This distance is calculated relative to the centroid—a central point where the means of all variables intersect—with larger distances indicating greater deviation from the center.

This measure takes into account correlations within the dataset, which is especially useful when trying to refine and validate a questionnaire with overlapping itmes.

We removed `r length(outliers$distance)` (`r insight::format_percent(length(outliers$distance) / nrow(df))`) participants based on multivariate distance.

```{r}
df <- filter(df, !Participant %in% outliers$attentionchecks)
df <- filter(df, !Participant %in% outliers$distance)
```

## Final Sample

::: panel-tabset
## Summary

-The final sample includes `r report::report_participants(df, age = "Age", sex = NA, gender = "Gender")`.

## Age and Gender

```{r p_demographics_age_gender}
#| warning: false

#| error: false

p_age <- estimate_density(df$Age) |>
  normalize(select = y) |>
  mutate(y = y * 86) |>  # To match the binwidth
  ggplot(aes(x = x)) +
  geom_histogram(data=df, aes(x = Age, fill=Gender), bins=28) +
  geom_vline(xintercept = mean(df$Age), color = "#ca0020", linewidth=1.5) +
  scale_fill_manual(values = c("Male"= "#64B", "Female"= "#8EB69B", "Other"="orange")) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  labs(title = "Age and Gender", y = "Number of Participants", color = NULL, subtitle = "Distribution of participants' age and gender") +
  theme_modern(axis.title.space = 10) +
  theme(
    plot.title = element_text(size = rel(1.2), face = "bold", hjust = 0),
    plot.subtitle = element_text(size = rel(1.2), vjust = 7),
    axis.text.y = element_text(size = rel(1.1)),)

p_age
```

## Education

```{r p_demographics_education}
#| warning: false

#| error: false

# Did not add education disciplines 

p_edu <- df |>
  ggplot(aes(x = Education)) +
  geom_bar(aes(fill = Education)) +
  scale_y_continuous(expand = c(0, 0), breaks= scales::pretty_breaks()) +
  scale_fill_viridis_d(guide = "none") +
  labs(title = "Education", y = "Number of Participants", subtitle = "Participants per achieved education level") +
  theme_modern(axis.title.space = 15) +
  theme(
    plot.title = element_text(size = rel(1.2), face = "bold", hjust = 0),
    plot.subtitle = element_text(size = rel(1.2), vjust = 7),
    axis.text.y = element_text(size = rel(1.1)),
    axis.text.x = element_text(size = rel(0.5), angle = 45, hjust =1),
    axis.title.x = element_blank()
  )

p_edu


# Student
table(df$Student) |>
  as.data.frame() |>
  rename(Student = Var1, Frequency = Freq) |>
  knitr::kable()
```

## Ethinicity

```{r p_demographics_ethnicity}
#| warning: false

#| error: false


p_eth <- df |>
  ggplot(aes(x = Ethnicity)) +
  geom_bar(aes(fill = Ethnicity)) +
  scale_y_continuous(expand = c(0, 0), breaks= scales::pretty_breaks()) +
  scale_fill_viridis_d(guide = "none") +
  labs(title = "Ethnicity", y = "Number of Participants", subtitle = "Participants per Ethnicity") +
  theme_modern(axis.title.space = 15) +
  theme(
    plot.title = element_text(size = rel(1.2), face = "bold", hjust = 0),
    plot.subtitle = element_text(size = rel(1.2), vjust = 7),
    axis.text.y = element_text(size = rel(1.1)),
    axis.text.x = element_text(size = rel(0.6), angle = 45, hjust = 1),
    axis.title.x = element_blank())
    
p_eth

```

## Country of Residence

```{r p_demographics_country}
#| warning: false

#| error: false

p_cou <- df |>
 ggplot(aes(x = Country)) +
 geom_bar(aes(fill = Country)) +
 scale_y_continuous(expand = c(0, 0), breaks= scales::pretty_breaks()) +
 scale_fill_viridis_d(guide = "none") +
 labs(title = "Country of Residence", y = "Number of Participants", subtitle = "Participants per Country they are currently living") +
 theme_modern(axis.title.space = 15) +
 theme(
   plot.title = element_text(size = rel(1.2), face = "bold", hjust = 0),
   plot.subtitle = element_text(size = rel(1.2), vjust = 7),
   axis.text.y = element_text(size = rel(1.1)),
   axis.text.x = element_text(size = rel(0.7), angle = 45, hjust = 1),
   axis.title.x = element_blank())

p_cou
```

```{r p_demographics_map}
#| warning: false

#| error: false

p_map <- df |>
  mutate(Country = case_when(
    Country=="United States"~ "USA",
    Country=="United Kingdom" ~ "UK",
    TRUE ~ Country
  ))|>
  dplyr::select(region = Country) |>
  group_by(region) |>
  summarize(n = n()) |>
  right_join(map_data("world"), by = "region") |>
  # mutate(n = replace_na(n, 0)) |>
  ggplot(aes(long, lat, group = group)) +
  geom_polygon(aes(fill = n)) +
  scale_fill_gradientn(colors = c("#E66101", "#ca0020", "#cc66cc")) +
  labs(fill = "N") +
  theme_void() +
  labs(title = "Country of Residence", subtitle = "Number of participants by country")  +
  theme(
    plot.title = element_text(size = rel(1.2), face = "bold", hjust = 0),
    plot.subtitle = element_text(size = rel(1.2))
  )

p_map
```
:::

```{r p_summary}
#| warning: false

#| error: false


p_map 
p_age 
p_edu
```

## Save

```{r}
#| warning: false

#| error: false

write.csv(df, "../data/data_participants.csv", row.names = FALSE)
```
